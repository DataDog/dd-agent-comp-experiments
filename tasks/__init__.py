"""
Invoke entrypoint, import here all the tasks we want to make available
"""
import os

from invoke import task
from collections import namedtuple

Component = namedtuple('Component', ['path', 'doc', 'team'])


def find_team(content):
    for l in content:
        if l.startswith('// team: '):
            return l.split(':', 2)[1].strip()


def find_doc(content):
    comment_block = []
    for l in content:
        if l.startswith('//'):
            comment_block.append(l[3:])
        elif l.startswith('package '):
            try:
                i = comment_block.index('')
                comment_block = comment_block[:i]
            except ValueError:
                pass
            return ''.join(comment_block).strip() + '\n'
        else:
            comment_block = []


def get_components(ctx):
    # find all files named `component.go`
    res = ctx.run('git ls-files comp/', hide=True)
    files = [f for f in res.stdout.splitlines() if f.endswith('/component.go')]
    for file in files:
        content = [l for l in open(file, "r")]
        if not any(l.startswith('type Component interface') for l in content):
            print(f"WARNING: {file} does not define a Component interface; skipping")
            pass

        path = file[:-len('/component.go')]
        team = find_team(content)
        doc = find_doc(content)

        if team is None:
            print(f"WARNING: {file} does not name a responsible team")

        yield Component(path, doc, team)


def make_components_md(components):
    pkg_root = 'github.com/djmitche/dd-agent-comp-experiments/'
    yield '# Agent Components'
    yield ''
    yield 'This file lists all components defined in this repository, with their package summary.'
    yield 'Click the links for more documentation.'
    yield ''
    for c in components:
        yield f'## [{c.path}](https://pkg.go.dev/{pkg_root}{c.path}@v0.0.2)'
        yield ''
        yield f'*Datadog Team*: {c.team}'
        yield ''
        yield c.doc


def make_codeowners(components):
    # TODO: this ignores pkg/, task/, etc. -- it would need to merge its changes into the agent CODEOWNERS
    yield '# AUTOGENERATED CONTENT'
    for c in components:
        if c.team:
            yield f'{c.path} @DataDog/{c.team}'


@task
def generate(ctx):
    components = list(get_components(ctx))
    components.sort()

    with open("COMPONENTS.md", "w") as f:
        f.write('\n'.join(make_components_md(components)))

    with open(".github/CODEOWNERS", "w") as f:
        f.write('\n'.join(make_codeowners(components)))
